{"ast":null,"code":"import{MemoryEventSubscription}from\"./Event\";export var QIService=function QIService(){var Qisession=null;// window.QiSession.connect(function (session) {\n//     session.service()\n// })\nvar subscribeToALMemoryEvent=function subscribeToALMemoryEvent(event,eventCallback,subscribeDoneCallback){var evt=new MemoryEventSubscription(event);onService(\"ALMemory\",function(ALMemory){ALMemory.subscriber(event).then(function(sub){evt.setSubscriber(sub);sub.signal.connect(eventCallback).then(function(id){evt.setId(id);if(subscribeDoneCallback)subscribeDoneCallback(id);});},onALMemoryError);},null);return evt;};var onService=function onService(serviceName,callback,errorCallback){connect(function(session){session.service(serviceName).then(function(service){callback(service);},function(){var reason=\"Failed getting a NaoQi Module: \"+serviceName;console.log(reason);if(errorCallback){errorCallback(reason);}});},errorCallback);};var connect=function connect(connectedCallback,failureCallback){if(Qisession){// We already have a session, don't create a new one\nconnectedCallback(Qisession);return;}else if(pendingConnectionCallbacks.length>0){// A connection attempt is in progress, just add this callback to the queue\npendingConnectionCallbacks.push(connectedCallback);return;}else{// Add self to the queue, but create a new connection.\npendingConnectionCallbacks.push(connectedCallback);}function onConnected(ses){Qisession=ses;var numCallbacks=pendingConnectionCallbacks.length;for(var i=0;i<numCallbacks;i++){pendingConnectionCallbacks[i](Qisession);}}window.QiSession(onConnected,failureCallback);};var onALMemoryError=function onALMemoryError(errMsg){console.log(\"ALMemory error: \"+errMsg);};var pendingConnectionCallbacks=[];return{subscribeToALMemoryEvent:subscribeToALMemoryEvent,onService:onService};};export var QiRoboService=QIService();","map":{"version":3,"names":["MemoryEventSubscription","QIService","Qisession","subscribeToALMemoryEvent","event","eventCallback","subscribeDoneCallback","evt","onService","ALMemory","subscriber","then","sub","setSubscriber","signal","connect","id","setId","onALMemoryError","serviceName","callback","errorCallback","session","service","reason","console","log","connectedCallback","failureCallback","pendingConnectionCallbacks","length","push","onConnected","ses","numCallbacks","i","window","QiSession","errMsg","QiRoboService"],"sources":["C:/Users/Alfia/Desktop/cst/apps/reactjs-hangman/src/services/QIService.js"],"sourcesContent":["import { MemoryEventSubscription } from \"./Event\";\r\nexport const QIService = () => {\r\n  let Qisession = null;\r\n\r\n  // window.QiSession.connect(function (session) {\r\n  //     session.service()\r\n  // })\r\n\r\n  const subscribeToALMemoryEvent = function(event, eventCallback, subscribeDoneCallback) {\r\n    var evt = new MemoryEventSubscription(event);\r\n    onService(\"ALMemory\", (ALMemory) => {\r\n        ALMemory.subscriber(event).then(function (sub) {\r\n            evt.setSubscriber(sub)\r\n            sub.signal.connect(eventCallback).then(function(id) {\r\n                evt.setId(id);\r\n                if (subscribeDoneCallback) subscribeDoneCallback(id)\r\n            });\r\n        },\r\n        onALMemoryError);\r\n    }, null);\r\n    return evt;\r\n}\r\n  const onService = (serviceName, callback, errorCallback) => {\r\n    connect((session) => {\r\n      session.service(serviceName).then(\r\n        (service) => {\r\n          callback(service);\r\n        },\r\n        () => {\r\n          var reason = \"Failed getting a NaoQi Module: \" + serviceName;\r\n          console.log(reason);\r\n          if (errorCallback) {\r\n            errorCallback(reason);\r\n          }\r\n        }\r\n      );\r\n    }, errorCallback);\r\n  };\r\n\r\n  const connect = (connectedCallback, failureCallback) => {\r\n    if (Qisession) {\r\n      // We already have a session, don't create a new one\r\n      connectedCallback(Qisession);\r\n      return;\r\n    } else if (pendingConnectionCallbacks.length > 0) {\r\n      // A connection attempt is in progress, just add this callback to the queue\r\n      pendingConnectionCallbacks.push(connectedCallback);\r\n      return;\r\n    } else {\r\n      // Add self to the queue, but create a new connection.\r\n      pendingConnectionCallbacks.push(connectedCallback);\r\n    }\r\n\r\n    function onConnected(ses) {\r\n      Qisession = ses;\r\n      var numCallbacks = pendingConnectionCallbacks.length;\r\n      for (var i = 0; i < numCallbacks; i++) {\r\n        pendingConnectionCallbacks[i](Qisession);\r\n      }\r\n    }\r\n\r\n    window.QiSession(onConnected, failureCallback);\r\n  };\r\n\r\n  var onALMemoryError = function (errMsg) {\r\n    console.log(\"ALMemory error: \" + errMsg);\r\n  };\r\n\r\n  var pendingConnectionCallbacks = [];\r\n\r\n\r\n  return {\r\n    subscribeToALMemoryEvent,\r\n    onService\r\n  }\r\n};\r\n\r\nexport const QiRoboService = QIService()"],"mappings":"AAAA,OAASA,uBAAT,KAAwC,SAAxC,CACA,MAAO,IAAMC,UAAS,CAAG,QAAZA,UAAY,EAAM,CAC7B,GAAIC,UAAS,CAAG,IAAhB,CAEA;AACA;AACA;AAEA,GAAMC,yBAAwB,CAAG,QAA3BA,yBAA2B,CAASC,KAAT,CAAgBC,aAAhB,CAA+BC,qBAA/B,CAAsD,CACrF,GAAIC,IAAG,CAAG,GAAIP,wBAAJ,CAA4BI,KAA5B,CAAV,CACAI,SAAS,CAAC,UAAD,CAAa,SAACC,QAAD,CAAc,CAChCA,QAAQ,CAACC,UAAT,CAAoBN,KAApB,EAA2BO,IAA3B,CAAgC,SAAUC,GAAV,CAAe,CAC3CL,GAAG,CAACM,aAAJ,CAAkBD,GAAlB,EACAA,GAAG,CAACE,MAAJ,CAAWC,OAAX,CAAmBV,aAAnB,EAAkCM,IAAlC,CAAuC,SAASK,EAAT,CAAa,CAChDT,GAAG,CAACU,KAAJ,CAAUD,EAAV,EACA,GAAIV,qBAAJ,CAA2BA,qBAAqB,CAACU,EAAD,CAArB,CAC9B,CAHD,EAIH,CAND,CAOAE,eAPA,EAQH,CATQ,CASN,IATM,CAAT,CAUA,MAAOX,IAAP,CACH,CAbC,CAcA,GAAMC,UAAS,CAAG,QAAZA,UAAY,CAACW,WAAD,CAAcC,QAAd,CAAwBC,aAAxB,CAA0C,CAC1DN,OAAO,CAAC,SAACO,OAAD,CAAa,CACnBA,OAAO,CAACC,OAAR,CAAgBJ,WAAhB,EAA6BR,IAA7B,CACE,SAACY,OAAD,CAAa,CACXH,QAAQ,CAACG,OAAD,CAAR,CACD,CAHH,CAIE,UAAM,CACJ,GAAIC,OAAM,CAAG,kCAAoCL,WAAjD,CACAM,OAAO,CAACC,GAAR,CAAYF,MAAZ,EACA,GAAIH,aAAJ,CAAmB,CACjBA,aAAa,CAACG,MAAD,CAAb,CACD,CACF,CAVH,EAYD,CAbM,CAaJH,aAbI,CAAP,CAcD,CAfD,CAiBA,GAAMN,QAAO,CAAG,QAAVA,QAAU,CAACY,iBAAD,CAAoBC,eAApB,CAAwC,CACtD,GAAI1B,SAAJ,CAAe,CACb;AACAyB,iBAAiB,CAACzB,SAAD,CAAjB,CACA,OACD,CAJD,IAIO,IAAI2B,0BAA0B,CAACC,MAA3B,CAAoC,CAAxC,CAA2C,CAChD;AACAD,0BAA0B,CAACE,IAA3B,CAAgCJ,iBAAhC,EACA,OACD,CAJM,IAIA,CACL;AACAE,0BAA0B,CAACE,IAA3B,CAAgCJ,iBAAhC,EACD,CAED,QAASK,YAAT,CAAqBC,GAArB,CAA0B,CACxB/B,SAAS,CAAG+B,GAAZ,CACA,GAAIC,aAAY,CAAGL,0BAA0B,CAACC,MAA9C,CACA,IAAK,GAAIK,EAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,YAApB,CAAkCC,CAAC,EAAnC,CAAuC,CACrCN,0BAA0B,CAACM,CAAD,CAA1B,CAA8BjC,SAA9B,EACD,CACF,CAEDkC,MAAM,CAACC,SAAP,CAAiBL,WAAjB,CAA8BJ,eAA9B,EACD,CAvBD,CAyBA,GAAIV,gBAAe,CAAG,QAAlBA,gBAAkB,CAAUoB,MAAV,CAAkB,CACtCb,OAAO,CAACC,GAAR,CAAY,mBAAqBY,MAAjC,EACD,CAFD,CAIA,GAAIT,2BAA0B,CAAG,EAAjC,CAGA,MAAO,CACL1B,wBAAwB,CAAxBA,wBADK,CAELK,SAAS,CAATA,SAFK,CAAP,CAID,CA1EM,CA4EP,MAAO,IAAM+B,cAAa,CAAGtC,SAAS,EAA/B"},"metadata":{},"sourceType":"module"}